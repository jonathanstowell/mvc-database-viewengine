@model MvcThemable.WebUI.Models.DatabaseViewCreationViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<form id="create-databaseview-form" action="@Url.Action("Create", "Page")" method="post">
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Page</legend>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.ViewModel)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.DatabaseView.ViewModel, new SelectList(Model.ViewModels, "Value", "Text", Model.DatabaseView.ViewModel), "-- Select View Model --", new { data_bind = "value: ViewModel" })
            @Html.ValidationMessageFor(model => model.ViewModels)
        </div>

        <div data-bind="visible: ViewModelProperties().length > 0">
            <div class="editor-label">
                <label for="ViewModelProperties">View Model Properties</label>
            </div>
            <div class="editor-field">
                <select id="ViewModelProperties" data-bind="options: ViewModelProperties, optionsText: 'Value', value: ViewModelProperty, optionsCaption: 'Choose...'"></select>
                <button data-bind="click: InsertIntoBody" class="btn btn-primary">Insert</button>
            </div>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.ViewKey)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DatabaseView.ViewKey)
            @Html.ValidationMessageFor(model => model.DatabaseView.ViewKey)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.Domain)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DatabaseView.Domain)
            @Html.ValidationMessageFor(model => model.DatabaseView.Domain)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.Controller)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DatabaseView.Controller)
            @Html.ValidationMessageFor(model => model.DatabaseView.Controller)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.Action)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DatabaseView.Action)
            @Html.ValidationMessageFor(model => model.DatabaseView.Action)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DatabaseView.Title)
            @Html.ValidationMessageFor(model => model.DatabaseView.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DatabaseView.Body)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.DatabaseView.Body, new { data_bind = "value: Body" })
            @Html.ValidationMessageFor(model => model.DatabaseView.Body)
        </div>

        <p>
            <input type="submit" value="Create" class="btn btn-primary" />
        </p>
    </fieldset>
</form>

<script>
    var database_view_creation   = {};

    (function (index) {

        database_view_creation = index;

        index.Body = ko.observable("");
        index.ViewModel = ko.observable();
        index.ViewModelProperty = ko.observable();
        index.ViewModelProperties = ko.observableArray([]);

        index.ViewModel.subscribe(function(newValue) {
            index.ViewModelProperties.removeAll();
            
            jQuery.get("@Url.Action("GetViewModelProperties", "Page")", { "fullClassName": newValue }, function(data) {
                jQuery.each(data, function(key, val) {
                    index.ViewModelProperties.push(val);
                });
            });
        });

        index.InsertIntoBody = function() {
            index.Body(index.Body() + "@@Model." + index.ViewModelProperty().Value);
        };

        jQuery(function () {
            ko.applyBindings(index, jQuery('#create-databaseview-form')[0]);
        });
        
    }(database_view_creation));
</script>